/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* compsecEnclave.edl - Top EDL file. */

enclave {
    include "sgx_tcrypto.h"

    /*
     * ocall_compsecEnclave_sample - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */

    untrusted { };

    trusted {

    	    public int ecall_compsecEnclave_write([user_check] unsigned int *data);

    	    public int ecall_compsecEnclave_generate_keys([in, out] sgx_ec256_public_t *public_encryption_key, [out] sgx_ec256_public_t *public_signature_key);

    	    public int ecall_compsecEnclave_generate_shared_key([in] sgx_ec256_public_t *received_public_encryption_key, [in] sgx_ec256_public_t *received_public_signature_key);

    	    public int ecall_compsecEnclave_encrypt_data([out , size = 80004] unsigned int *encrypted_data, [out] sgx_ec256_signature_t *data_signature);

    	    public int ecall_compsecEnclave_write_encrypted([user_check] unsigned int *encrypted_data, sgx_ec256_signature_t data_signature);

    	    public int ecall_compsecEnclave_decrypt_data();

    	    public int ecall_compsecEnclave_calculate_avg([in, out] int *result, [out] sgx_ec256_signature_t *result_signature);
    };
};